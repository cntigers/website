"use strict";(self.webpackChunkkoordinator_sh=self.webpackChunkkoordinator_sh||[]).push([[2157],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>k});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),m=a,k=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return t?r.createElement(k,i(i({ref:n},c),{},{components:t})):r.createElement(k,i({ref:n},c))}));function k(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const o={},i="Enhanced NodeResourceFit Plugin",l={unversionedId:"user-manuals/node-resource-fit-plus-scoring",id:"user-manuals/node-resource-fit-plus-scoring",title:"Enhanced NodeResourceFit Plugin",description:"- Summary",source:"@site/docs/user-manuals/node-resource-fit-plus-scoring.md",sourceDirName:"user-manuals",slug:"/user-manuals/node-resource-fit-plus-scoring",permalink:"/docs/next/user-manuals/node-resource-fit-plus-scoring",draft:!1,editUrl:"https://github.com/koordinator-sh/koordinator.sh/edit/main/docs/user-manuals/node-resource-fit-plus-scoring.md",tags:[],version:"current",lastUpdatedBy:"LY-today",lastUpdatedAt:1739859810,formattedLastUpdatedAt:"Feb 18, 2025",frontMatter:{},sidebar:"docs",previous:{title:"Installation Runtime Proxy",permalink:"/docs/next/user-manuals/installation-runtime-proxy"},next:{title:"Resource Reservation",permalink:"/docs/next/user-manuals/resource-reservation"}},s={},u=[{value:"Summary",id:"summary",level:2},{value:"Motivation",id:"motivation",level:2},{value:"DesignConsideration",id:"designconsideration",level:2},{value:"Goals",id:"goals",level:3},{value:"NonGoals",id:"nongoals",level:3},{value:"Proposal",id:"proposal",level:2},{value:"DesignDetails",id:"designdetails",level:2},{value:"NodeResourcesFitPlus",id:"noderesourcesfitplus",level:3},{value:"ScarceResourceAvoidance",id:"scarceresourceavoidance",level:3},{value:"Example",id:"example",level:2},{value:"SchedulerConfiguration",id:"schedulerconfiguration",level:3},{value:"GPU",id:"gpu",level:4},{value:"CPU",id:"cpu",level:4},{value:"AdaptToNativePlugins",id:"adapttonativeplugins",level:3},{value:"MostAllocated",id:"mostallocated",level:4},{value:"LeastAllocated",id:"leastallocated",level:4}],c={toc:u},p="wrapper";function d(e){let{components:n,...o}=e;return(0,a.kt)(p,(0,r.Z)({},c,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"enhanced-noderesourcefit-plugin"},"Enhanced NodeResourceFit Plugin"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#Summary"},"Summary")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#Motivation"},"Motivation")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#DesignConsideration"},"Design Consideration"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#Goals"},"Goals")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#NonGoals"},"Non-Goals")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#Proposal"},"Proposal")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#DesignDetails"},"Design Details"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#NodeResourcesFitPlus"},"NodeResourcesFitPlus")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#ScarceResourceAvoidance"},"ScarceResourceAvoidance")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#Example"},"Example"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#SchedulerConfiguration"},"Scheduler Configuration"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#GPU"},"GPU")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#CPU"},"CPU")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#AdaptToNativePlugins"},"Adapt to native plugins"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"- [MostAllocated](#Mostallocated)\n- [LeastAllocated](#Leastallocated)\n")))))),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("p",null,"The NodeResourcesFit plug-in of native k8s can only adopt a type of strategy for all resources, such as MostRequestedPriority and LeastRequestedPriority. However, in industrial practice, this design does not apply to some scenarios. For example: In AI scenarios, businesses that apply for GPUs prefer to occupy the entire GPU machine first to prevent GPU fragmentation; businesses that apply for CPU & MEM are prioritized and dispersed to non-GPU machines to prevent excessive consumption of CPU & MEM on GPU machines, resulting in real tasks of applying for GPUs. Pending due to insufficient non-GPU resources\n. It is therefore hoped that both strategies can be extended to address this business need."),(0,a.kt)("h2",{id:"motivation"},"Motivation"),(0,a.kt)("p",null,"case:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"GPU tasks take priority over the entire GPU"),(0,a.kt)("li",{parentName:"ul"},"CPU&MEM tasks are distributed to the CPU machine first")),(0,a.kt)("h2",{id:"designconsideration"},"DesignConsideration"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The solution is more versatile, not limited to AI clusters or CPU clusters, and not limited to common CPU resources or extended GPU resources.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Different resource policies can be configured for different cluster types and prioritized in the form of weights.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Easy to expand"))),(0,a.kt)("h3",{id:"goals"},"Goals"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Different types of resources can be configured with different strategies to prioritize them in the form of weights")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Prevent pods that have not applied for scarce resources from being scheduled to nodes with scarce resources."))),(0,a.kt)("h3",{id:"nongoals"},"NonGoals"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None.")),(0,a.kt)("h2",{id:"proposal"},"Proposal"),(0,a.kt)("p",null,"Extend two plug-ins to meet the above needs"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"NodeResourcesFitPlus"),(0,a.kt)("li",{parentName:"ul"},"ScarceResourceAvoidance")),(0,a.kt)("h2",{id:"designdetails"},"DesignDetails"),(0,a.kt)("h3",{id:"noderesourcesfitplus"},"NodeResourcesFitPlus"),(0,a.kt)("p",null,"config:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"resources: \n  nvidia.com/gpu:\n    type: MostAllocated\n    weight: 2\n  cpu:\n    type: LeastAllocated\n    weight: 1\n  memory:\n    type: LeastAllocated\n    weight: 1\n")),(0,a.kt)("p",null,"config description:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"image",src:t(165).Z,width:"645",height:"148"})),(0,a.kt)("p",null,"node score:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"finalScoreNode = [(weight1 * resource1) + (weight2 * resource2) + \u2026 + (weightN* resourceN)] /(weight1+weight2+ \u2026 +weightN)\n")),(0,a.kt)("h3",{id:"scarceresourceavoidance"},"ScarceResourceAvoidance"),(0,a.kt)("p",null,"config:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"resources: \n- nvidia.com/gpu \n")),(0,a.kt)("p",null,"config description:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Obtain the resource type requested by the pod and the list of resource types that the node can allocate"),(0,a.kt)("li",{parentName:"ul"},"Node redundant resource type = node total resource type - pod application resource type"),(0,a.kt)("li",{parentName:"ul"},"The number of core resource types in the node redundant resource type = the intersection of the node redundant resource type and the core resource type list"),(0,a.kt)("li",{parentName:"ul"},"The more core resource types there are in the redundant resource types of node, the lower the score will be.")),(0,a.kt)("p",null,"node score:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"finalScoreNode = (allocatablesResourcesNum - requestsResourcesNum) * framework.MaxNodeScore / allocatablesResourcesNum\n")),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("h3",{id:"schedulerconfiguration"},"SchedulerConfiguration"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'\nprofiles:\n- pluginConfig:\n  - args:\n      apiVersion: kubescheduler.config.k8s.io/v1\n      kind: ResourceTypesArgs\n      resources: \n        nvidia.com/gpu:\n          type: MostAllocated\n          weight: 2\n        cpu:\n          type: LeastAllocated\n          weight: 1\n        memory:\n          type: LeastAllocated\n          weight: 1\n    name: NodeResourcesFitPlus\n  - args:\n      apiVersion: kubescheduler.config.k8s.io/v1\n      kind: ScarceResourceAvoidanceArgs\n      resources: \n      - nvidia.com/gpu\n    name: ScarceResourceAvoidance\n  plugins:\n    score:\n      enabled:\n      - name: NodeResourcesFitPlus\n        weight: 2\n      - name: ScarceResourceAvoidance\n        weight: 2\n      disabled:\n      - name: "*"\n  schedulerName: koord-scheduler\n')),(0,a.kt)("h4",{id:"gpu"},"GPU"),(0,a.kt)("p",null,"deployment Resource application"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: test-scheduler1\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: test-scheduler1\n  template:\n    metadata:\n      labels:\n        app: test-scheduler1\n    spec:\n      schedulerName: koord-scheduler\n      containers:\n        - image: dockerpull.com/nginx\n          imagePullPolicy: IfNotPresent\n          name: nginx\n          ports:\n            - containerPort: 80\n          resources:\n            requests:\n              cpu: "100"\n              memory: "100"\n              nvidia.com/gpu: 2\n            limits:\n              cpu: "100"\n              memory: "100"\n              nvidia.com/gpu: 2\n')),(0,a.kt)("p",null,"Node allocation rate information"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"node1: cpu 58%, memory 21%, nvidia.com/gpu 6 (total 8)\n\nnode2: cpu 22%, memory 5%, nvidia.com/gpu 0 (total 8)\n")),(0,a.kt)("p",null,"Result: Prioritize GPU machines and pool GPU resources"),(0,a.kt)("p",null,"Log view => ",(0,a.kt)("inlineCode",{parentName:"p"},"Top10 scores for pod")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"| # | Pod | Node | Score | NodeResourcesFitPlus | ScarceResourceAvoidance |\n| 0 | test-scheduler1-xxx | node1 | 358 | 158 | 200 |\n| 1 | test-scheduler1-xxx | node2 | 296 | 96 | 200 |\n")),(0,a.kt)("h4",{id:"cpu"},"CPU"),(0,a.kt)("p",null,"deployment Resource application"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: test-scheduler1\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: test-scheduler1\n  template:\n    metadata:\n      labels:\n        app: test-scheduler1\n    spec:\n      schedulerName: koord-scheduler\n      containers:\n        - image: dockerpull.com/nginx\n          imagePullPolicy: IfNotPresent\n          name: nginx\n          ports:\n            - containerPort: 80\n          resources:\n            requests:\n              cpu: "100"\n              memory: "100"\n            limits:\n              cpu: "100"\n              memory: "100"\n')),(0,a.kt)("p",null,"Node allocation rate information"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"node1: cpu 22%, memory 10%, nvidia.com/gpu 6 (total 8)\nnode2: cpu 40%, memory 50%\nnode3: cpu 30%, memory 20%\n")),(0,a.kt)("p",null,"Result: Prioritize CPU machines and disperse CPU and MEM resources"),(0,a.kt)("p",null,"Log view => ",(0,a.kt)("inlineCode",{parentName:"p"},"Top10 scores for pod")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"| # | Pod | Node | Score | NodeResourcesFitPlus | ScarceResourceAvoidance |\n| 0 | test-scheduler1-xxx | node1 | 310 | 144 | 166 |\n| 1 | test-scheduler1-xxx | node2 | 262 | 62 | 200 |\n| 2 | test-scheduler1-xxx | node3 | 326 | 126 | 200 |\n")),(0,a.kt)("h3",{id:"adapttonativeplugins"},"AdaptToNativePlugins"),(0,a.kt)("h4",{id:"mostallocated"},"MostAllocated"),(0,a.kt)("p",null,"native configuration"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: scheduler-config\n  namespace: kube-system\ndata:\n  scheduler-config.yaml: |\n    apiVersion: kubescheduler.config.k8s.io/v1\n    kind: KubeSchedulerConfiguration\n    profiles:\n    - schedulerName: koord-scheduler\n     pluginConfig:\n       - args:\n           scoringStrategy:\n             resources:\n             - name: cpu\n               weight: 2\n             - name: memory\n               weight: 1\n             type: MostAllocated\n         name: NodeResourcesFit\n      plugins:\n        score:\n          enabled:\n          - name: "NodeResourcesFit"\n')),(0,a.kt)("p",null,"plus configuration"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: scheduler-config\n  namespace: kube-system\ndata:\n  scheduler-config.yaml: |\n    apiVersion: kubescheduler.config.k8s.io/v1\n    kind: KubeSchedulerConfiguration\n    profiles:\n    - schedulerName: koord-scheduler\n     pluginConfig:\n       - args:\n          apiVersion: kubescheduler.config.k8s.io/v1\n          kind: ResourceTypesArgs\n          resources: \n            cpu:\n              type: MostAllocated\n              weight: 2\n            memory:\n              type: MostAllocated\n              weight: 1\n         name: NodeResourcesFitPlus\n      plugins:\n        score:\n          enabled:\n          - name: "NodeResourcesFitPlus"\n')),(0,a.kt)("h4",{id:"leastallocated"},"LeastAllocated"),(0,a.kt)("p",null,"native configuration"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: scheduler-config\n  namespace: kube-system\ndata:\n  scheduler-config.yaml: |\n    apiVersion: kubescheduler.config.k8s.io/v1\n    kind: KubeSchedulerConfiguration\n    profiles:\n    - schedulerName: koord-scheduler\n     pluginConfig:\n       - args:\n           scoringStrategy:\n             resources:\n             - name: cpu\n               weight: 2\n             - name: memory\n               weight: 1\n             type: LeastAllocated\n         name: NodeResourcesFit\n      plugins:\n        score:\n          enabled:\n          - name: "NodeResourcesFit"\n')),(0,a.kt)("p",null,"plus configuration"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: scheduler-config\n  namespace: kube-system\ndata:\n  scheduler-config.yaml: |\n    apiVersion: kubescheduler.config.k8s.io/v1\n    kind: KubeSchedulerConfiguration\n    profiles:\n    - schedulerName: koord-scheduler\n     pluginConfig:\n       - args:\n          apiVersion: kubescheduler.config.k8s.io/v1\n          kind: ResourceTypesArgs\n          resources: \n            cpu:\n              type: LeastAllocated\n              weight: 2\n            memory:\n              type: LeastAllocated\n              weight: 1\n         name: NodeResourcesFitPlus\n      plugins:\n        score:\n          enabled:\n          - name: "NodeResourcesFitPlus"\n')))}d.isMDXComponent=!0},165:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/node-resource-fit-plus-scoring-en-80725663002084486b4f0767766e69a6.png"}}]);